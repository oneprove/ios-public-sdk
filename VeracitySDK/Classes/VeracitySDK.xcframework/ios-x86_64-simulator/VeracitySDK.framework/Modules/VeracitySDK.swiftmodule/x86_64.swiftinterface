// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VeracitySDK
import ARCameraController
import AVFoundation.AVCaptureDevice
import AVFoundation
import Alamofire
import BlurDetector
import CameraCapture
import CoreTelephony
import FingerprintFinder
import Foundation
import ImageIO
import MAPView
import Network
import QuartzCore
import Realm
import RealmSwift
import SDWebImage
import SequentialBlurDetector
import Smartlook
import SnapKit
import Swift
import SwiftyJSON
import UIKit
import UserNotifications
@_exported import VeracitySDK
import VideoToolbox
extension String {
  public func convertToDictionary() -> [Swift.AnyHashable : Any]?
}
extension String {
  public var isValidEmail: Swift.Bool {
    get
  }
}
extension String {
  public var doubleValue: Swift.Double? {
    get
  }
}
extension Encodable {
  public func toJSONData() -> Foundation.Data?
  public func toDictionary() throws -> [Swift.String : Any]
}
public protocol APIEncoder {
  func encode(from object: Swift.Encodable) -> Foundation.Data?
  func encode(from dictionary: [Swift.String : Any]) -> Foundation.Data?
}
public struct DTOJob : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DTOError : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DTOCredits : Swift.Codable {
  public var credits: Swift.Int
  public var invoiceBilling: Swift.Bool
  public var queryCredits: Swift.Int {
    get
    set
  }
  public init(credit: Swift.Int, queryCredit: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class NotificationManager : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.NotificationManager
  public func requestAccess()
  public func didRegisterForFirebaseNotifications(withToken token: Swift.String)
  public func didFailToRegisterForRemote()
  public func processReceivedNotification(userInfo: [Swift.AnyHashable : Any])
  public func tryToHandleUnprocessedNotifications()
  public func checkNotificationSettings(_ completion: @escaping (UserNotifications.UNAuthorizationStatus) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension DTOFingerprintLocation : VeracitySDK.Entity {
  public var storable: VeracitySDK.FingerprintLocation {
    get
  }
  public func toStorable() -> VeracitySDK.FingerprintLocation
  public typealias StoreType = VeracitySDK.FingerprintLocation
}
@objc @_inheritsConvenienceInitializers public class FingerprintLocation : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var x: Swift.Int
  @objc dynamic public var y: Swift.Int
  @objc dynamic public var width: Swift.Int
  @objc dynamic public var height: Swift.Int
  public var cgRectValue: CoreGraphics.CGRect {
    get
  }
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  convenience public init(rect: CoreGraphics.CGRect)
  convenience public init?(map: [Swift.String : Any])
  public var model: VeracitySDK.DTOFingerprintLocation {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOFingerprintLocation
  @objc deinit
}
infix operator >>> : Display
precedencegroup Display {
  associativity: left
  higherThan: AssignmentPrecedence
  lowerThan: AdditionPrecedence
}
@discardableResult
public func >>> <E>(lhs: E, block: (E) -> Swift.Void) -> E where E : AnyObject
@discardableResult
public func >>> <E>(lhs: E?, block: (E?) -> Swift.Void) -> E? where E : AnyObject
@discardableResult
public func >>> <E, F>(lhs: E, rhs: F) -> E where E : UIKit.UIView, F : UIKit.UIView
@discardableResult
public func >>> <E, F>(lhs: E, rhs: F?) -> E where E : UIKit.UIView, F : UIKit.UIView
extension DTOBatchJob : VeracitySDK.Entity {
  public var storable: VeracitySDK.BatchJob {
    get
  }
  public func toStorable() -> VeracitySDK.BatchJob
  public typealias StoreType = VeracitySDK.BatchJob
}
@objc @_inheritsConvenienceInitializers public class BatchJob : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var identifier: Swift.String!
  @objc dynamic public var completed: Swift.Bool
  public var childJobs: RealmSwift.List<VeracitySDK.Job>
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  public static func createBatchJob(_ completion: @escaping (VeracitySDK.BatchJob?, Swift.Error?) -> ())
  public var model: VeracitySDK.DTOBatchJob {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOBatchJob
  @objc deinit
}
public protocol VeracityItem {
  var id: Swift.String { get }
  var state: VeracitySDK.ItemState? { get }
  var itemName: Swift.String? { get }
  var createdString: Swift.String? { get }
  var hourString: Swift.String? { get }
  var date: Foundation.Date? { get }
  var thumbImageUrl: Swift.String? { get }
  var overlayImageUrl: Swift.String? { get }
}
extension VeracityItem {
  public var createdString: Swift.String? {
    get
  }
  public var hourString: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SearchHistory : RealmSwift.Object {
  @objc dynamic public var identifier: Swift.String!
  @objc override public static func primaryKey() -> Swift.String
  convenience public init(item: VeracitySDK.ProtectItem)
  @objc override dynamic public init()
  @objc deinit
}
public enum FontStyle : Swift.String {
  case regular
  case bold
  case light
  case medium
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FontName {
  case NBAkademie(style: VeracitySDK.FontStyle)
  public var name: Swift.String {
    get
  }
}
public enum AppFont {
  case NBAkademieBold(size: CoreGraphics.CGFloat)
  case NBAkademieRegular(size: CoreGraphics.CGFloat)
  case NBAkademieMedium(size: CoreGraphics.CGFloat)
  case NBAkademieLight(size: CoreGraphics.CGFloat)
  public var font: UIKit.UIFont? {
    get
  }
}
public struct Fonts {
  public static let headerFont: UIKit.UIFont?
  public static let buttonFont: UIKit.UIFont?
  public static let titleLabelFont: UIKit.UIFont?
  public static let textNormalFont: UIKit.UIFont?
  public static let textSmallFont: UIKit.UIFont?
  public static let textMenuFont: UIKit.UIFont?
  public static let textMenuBoldFont: UIKit.UIFont?
}
public typealias CroppedImageCallbackCompletion = (UIKit.UIImage, [CoreGraphics.CGPoint]) -> ()
@objc @_inheritsConvenienceInitializers public class CropView : UIKit.UIView {
  public var sourceImage: UIKit.UIImage! {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  public init(_ applyForTwoCorners: Swift.Bool)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  convenience public init(sourceImage: UIKit.UIImage)
  public func detectEdges(width: CoreGraphics.CGFloat = 0.0, height: CoreGraphics.CGFloat = 0.0)
  public func crop(_ completion: VeracitySDK.CroppedImageCallbackCompletion? = nil)
  public func redoCrop()
  @objc deinit
}
extension CropView : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class VPOperation : Foundation.Operation {
  public var finishingBlock: (() -> ())?
  public var progressCallback: VeracitySDK.UploadProgressHandlerBlock?
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  public func executing(_ executing: Swift.Bool)
  public func finish(_ finished: Swift.Bool)
  public func endOperation()
  public func finishOperation()
  @objc override dynamic public init()
  @objc deinit
}
public enum UnitType : Swift.Int {
  case cm
  case inch
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIImage {
  public func resized(withPercentage percentage: CoreGraphics.CGFloat) -> UIKit.UIImage?
  public func resized(toSize newSize: CoreGraphics.CGSize) -> UIKit.UIImage?
}
public protocol APIDecoder {
  func decode<T>(from data: Foundation.Data, as type: T.Type) -> T? where T : Swift.Decodable
}
@objc public protocol EventListenerDelegate {
  @objc optional func onProtectUploadingFinished(protectItem: VeracitySDK.LocalProtectItem)
  @objc optional func onProtectUploadingStarted(protectItem: VeracitySDK.LocalProtectItem)
  @objc optional func onProtectUploadingProgress(progress: Swift.Int, protectItem: VeracitySDK.LocalProtectItem)
  @objc optional func onProtectAnalyzingFinished(protectItems: [VeracitySDK.ProtectItem])
  @objc optional func onVerifyUploadingStarted(jobItem: VeracitySDK.LocalJob)
  @objc optional func onVerifyUploadingProgress(progress: Swift.Int, jobItem: VeracitySDK.LocalJob)
  @objc optional func onVerifyUploadingFinished(jobItem: VeracitySDK.LocalJob)
  @objc optional func onVerifyAnalyzingFinished(jobItems: [VeracitySDK.Job])
}
public class EventChangesObserver {
  weak public var delegate: VeracitySDK.EventListenerDelegate?
  public init()
  @objc deinit
}
public struct DTOBatchJob : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DTOFingerprintLocation : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum JobType : Swift.String {
  case verification
  case batchVerification
  case imageSearch
  case protection
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension DTOJob : VeracitySDK.Entity {
  public var storable: VeracitySDK.Job {
    get
  }
  public func toStorable() -> VeracitySDK.Job
  public typealias StoreType = VeracitySDK.Job
}
@objc @_inheritsConvenienceInitializers public class Job : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var identifier: Swift.String!
  @objc dynamic public var userID: Swift.String?
  @objc dynamic public var jobName: Swift.String?
  @objc dynamic public var artworkID: Swift.String?
  @objc dynamic public var artwork: VeracitySDK.ProtectItem?
  @objc dynamic public var searchQueryImageUrl: Swift.String?
  @objc dynamic public var searchQueryImageUrlThumbnail: Swift.String?
  @objc dynamic public var error: Swift.String?
  @objc dynamic public var completed: Swift.Bool
  @objc dynamic public var tradingCode: VeracitySDK.TradingCode?
  final public let blockchainVerified: RealmSwift.RealmOptional<Swift.Bool>
  public var searchResults: RealmSwift.List<Swift.String>
  public var childJobs: RealmSwift.List<VeracitySDK.Job>
  public var state: VeracitySDK.ItemState? {
    get
  }
  public var jobType: VeracitySDK.JobType? {
    get
  }
  public var createdAtDate: Foundation.Date? {
    get
  }
  public var resultIndicator: Swift.Bool {
    get
  }
  convenience public init?(map: [Swift.String : VeracitySDK.AnyCodable])
  convenience public init?(dict: [Swift.String : Any])
  @objc override public static func primaryKey() -> Swift.String
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  public var model: VeracitySDK.DTOJob {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOJob
  @objc deinit
}
extension Job : VeracitySDK.VeracityItem {
  public var id: Swift.String {
    get
  }
  public var itemName: Swift.String? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var thumbImageUrl: Swift.String? {
    get
  }
  public var overlayImageUrl: Swift.String? {
    get
  }
}
public struct DTOPublicProtectItem : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DTOFingerprint : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIDevice {
  public var modelCode: Swift.String {
    get
  }
}
public enum AlgoType : Swift.String, Swift.CaseIterable {
  case celery
  case luxury
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VeracitySDK.AlgoType]
  public typealias RawValue = Swift.String
  public static var allCases: [VeracitySDK.AlgoType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ApplicationVertical : Swift.String {
  case identityDocuments
  case packaging
  case apparel
  case labels
  case art
  case lpmPoc
  case sicpa
  public var title: Swift.String {
    get
  }
  public var algoSwitchingSupported: Swift.Bool {
    get
  }
  public var allowedAlgosByDefault: [VeracitySDK.AlgoType]? {
    get
  }
  public var defaultProtectAlgo: Swift.String? {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol VPImageUploadOperation : VeracitySDK.VPOperation {
  var filename: Swift.String { get set }
  var referId: Swift.String? { get set }
  var imageUrlString: Swift.String? { get }
  var error: Swift.Error? { get }
  var lastProgressValue: Foundation.Progress? { get }
  var trackingUpload: VeracitySDK.FileUploadTrack? { get set }
}
extension VPImageUploadOperation {
  public func startTrackTimeUpload()
  public func endTrackTimeUpload()
  public func getFileUploadTracked() -> VeracitySDK.FileUploadTrack
}
public class APIConfiguration {
  public static var current: VeracitySDK.APIConfiguration?
  public var host: Swift.String
  public var scheme: Swift.String
  public var port: Swift.Int?
  public var headers: () -> ([Swift.String : Swift.String])
  public var encoder: VeracitySDK.APIEncoder
  public var decoder: VeracitySDK.APIDecoder
  public var completionInMainThread: Swift.Bool
  public var allowsCellularAccess: Swift.Bool
  public init(host: Swift.String, scheme: Swift.String = "https", port: Swift.Int? = nil, headers: @escaping () -> ([Swift.String : Swift.String]) = { return [:] })
  public func with(encoder: VeracitySDK.APIEncoder) -> VeracitySDK.APIConfiguration
  public func with(decoder: VeracitySDK.APIDecoder) -> VeracitySDK.APIConfiguration
  public func with(completionInMainThread: Swift.Bool) -> VeracitySDK.APIConfiguration
  public func with(allowsCellularAccess: Swift.Bool) -> VeracitySDK.APIConfiguration
  @objc deinit
}
public typealias ReachabilityChangeBlock = (Swift.Bool) -> ()
@_hasMissingDesignatedInitializers public class ConnectionManager {
  public static let shared: VeracitySDK.ConnectionManager
  public var reachabilityChangeCallback: VeracitySDK.ReachabilityChangeBlock?
  @objc deinit
  public func startObservingChanges()
  public func stopObserver()
  public func isConnected() -> Swift.Bool
  public func isOnGoodConnection() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class FileUploadTrack : RealmSwift.Object {
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum ItemState : Swift.String {
  case protected
  case verified
  case failed
  case doesntMatch
  case inTransfer
  case incomplete
  case analyzing
  case search
  case uploading
  case pending
  case unknown
  public var title: Swift.String? {
    get
  }
  public var titleVerify: Swift.String? {
    get
  }
  public var messageVerify: Swift.String? {
    get
  }
  public var textColor: UIKit.UIColor {
    get
  }
  public var textBackgroundColor: UIKit.UIColor {
    get
  }
  public var backgroundImg: UIKit.UIImage? {
    get
  }
  public var backgroudColor: UIKit.UIColor? {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension DTOProtectItem : VeracitySDK.Entity {
  public var storable: VeracitySDK.ProtectItem {
    get
  }
  public func toStorable() -> VeracitySDK.ProtectItem
  public typealias StoreType = VeracitySDK.ProtectItem
}
@objc @_inheritsConvenienceInitializers public class ProtectItem : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var identifier: Swift.String
  @objc dynamic public var name: Swift.String!
  @objc dynamic public var artistID: Swift.String!
  @objc dynamic public var artistFirstName: Swift.String?
  @objc dynamic public var artistLastName: Swift.String?
  @objc dynamic public var overview: Swift.String?
  @objc dynamic public var thumbnail: Swift.String?
  @objc dynamic public var width: Swift.Double
  @objc dynamic public var height: Swift.Double
  @objc dynamic public var authorized: Swift.Bool
  @objc dynamic public var year: Swift.Int
  @objc dynamic public var createdByID: Swift.String?
  @objc dynamic public var publicID: Swift.String?
  @objc dynamic public var errorMessage: Swift.String?
  @objc dynamic public var firstTradingCode: VeracitySDK.TradingCode?
  @objc dynamic public var algorithmUsed: Swift.String?
  @objc dynamic public var webhookUrl: Swift.String?
  @objc dynamic public var transferRequest: Swift.String?
  @objc dynamic public var transferedFrom: Swift.String?
  @objc dynamic public var transferedTo: Swift.String?
  @objc dynamic public var transferID: Swift.String?
  public var state: VeracitySDK.ItemState? {
    get
  }
  public var createdAtDate: Foundation.Date? {
    get
  }
  public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public var fingerprintNames: [Swift.String]? {
    get
  }
  public var fingerprintUrls: [Swift.String]? {
    get
  }
  public var createdByMe: Swift.Bool {
    get
  }
  public var authenticity: Swift.Bool {
    get
  }
  public var tooSmallItem: Swift.Bool {
    get
  }
  public var webhookURL: Foundation.URL? {
    get
  }
  public var resultIndicator: Swift.Bool {
    get
  }
  convenience public init?(map: [Swift.String : VeracitySDK.AnyCodable])
  convenience public init?(json: [Swift.String : Any])
  @objc override public static func primaryKey() -> Swift.String
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  public var model: VeracitySDK.DTOProtectItem {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOProtectItem
  @objc deinit
}
extension ProtectItem : VeracitySDK.VeracityItem {
  public var id: Swift.String {
    get
  }
  public var itemName: Swift.String? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var thumbImageUrl: Swift.String? {
    get
  }
  public var overlayImageUrl: Swift.String? {
    get
  }
}
public typealias UploadProgressHandlerBlock = (Foundation.Progress?, Swift.Bool, Swift.Bool) -> ()
public typealias UploadProgressCallbackBlock = (Swift.Int, Swift.String?) -> ()
public typealias CustomImageUploadOperationProvider = (Swift.String) -> (VeracitySDK.VPImageUploadOperation?)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UploadManager : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.UploadManager
  public var currentUploadIdentifier: Swift.String? {
    get
  }
  public var currentUploadProgressCallBack: VeracitySDK.UploadProgressCallbackBlock?
  public var lastKnownUploadProgressValue: Swift.Int?
  public func startObserving()
  @objc deinit
}
extension DTOTradingCode : VeracitySDK.Entity {
  public var storable: VeracitySDK.TradingCode {
    get
  }
  public func toStorable() -> VeracitySDK.TradingCode
  public typealias StoreType = VeracitySDK.TradingCode
}
@objc @_inheritsConvenienceInitializers public class TradingCode : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var code: Swift.String!
  @objc dynamic public var expiration: Foundation.Date!
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  convenience public init?(map: [Swift.String : Any])
  public var model: VeracitySDK.DTOTradingCode {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOTradingCode
  @objc deinit
}
public struct DTOCreator : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias ImageCallback = (UIKit.UIImage?) -> ()
@_hasMissingDesignatedInitializers public class ImageManager {
  public static func provideImage(for url: Foundation.URL, ignoreCache: Swift.Bool = false, cacheResult: Swift.Bool = true, completion: @escaping VeracitySDK.ImageCallback)
  public static func provideCachedImage(for url: Foundation.URL) -> UIKit.UIImage?
  public static func removeCache()
  @objc deinit
}
public struct LocaleCore {
  public static var currentLocale: Swift.String {
    get
    set(newLocale)
  }
  public static func localized(forString s: Swift.String?) -> Swift.String
  public static func reset()
}
public struct AnyCodable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: VeracitySDK.AnyCodable, rhs: VeracitySDK.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public init(nilLiteral: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
  public typealias ArrayLiteralElement = Any
  public typealias BooleanLiteralType = Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias FloatLiteralType = Swift.Double
  public typealias IntegerLiteralType = Swift.Int
  public typealias Key = Swift.AnyHashable
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public typealias Value = Any
}
@objc @_inheritsConvenienceInitializers public class ProtectItemsReloadOperation : VeracitySDK.VPOperation {
  @objc override dynamic public func main()
  @objc override dynamic public init()
  @objc deinit
}
public enum DetailCaptureType {
  case verify
  case protect
  public static func == (a: VeracitySDK.DetailCaptureType, b: VeracitySDK.DetailCaptureType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias DetailCaptureLocation = CoreGraphics.CGRect
public struct DetailCaptureConfig {
}
@_hasMissingDesignatedInitializers public class ImagePersistence {
  public class func saveImageToDisk(imageData: Foundation.Data, filenameSuffix: Swift.String? = nil, fileExtension: Swift.String = "jpg") throws -> Swift.String
  public class func saveImageToDisk(imageData: Foundation.Data, asJPEG jpg: Swift.Bool, filenameSuffix: Swift.String? = nil) throws -> Swift.String
  public class func imageAtDiskPath(path: Swift.String) -> UIKit.UIImage?
  public class func imageDataAtDiskPath(path: Swift.String) -> Foundation.Data?
  public class func removeImage(atPath path: Swift.String)
  public class func removeAllTakenImages()
  @objc deinit
}
extension Date {
  public var year: Swift.Int {
    get
  }
  public var before24Hours: Foundation.Date {
    get
  }
  public func string(withFormat format: Swift.String = "dd/MM/yyyy HH:mm") -> Swift.String
}
extension DTOUser : VeracitySDK.Entity {
  public var storable: VeracitySDK.User {
    get
  }
  public func toStorable() -> VeracitySDK.User
  public typealias StoreType = VeracitySDK.User
}
@objc @_inheritsConvenienceInitializers public class User : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var email: Swift.String
  @objc dynamic public var invoiceBilling: Swift.Bool
  @objc dynamic public var arGuidingON: Swift.Bool
  @objc dynamic public var shareAnalyticON: Swift.Bool
  @objc dynamic public var flashlightOn: Swift.Bool
  @objc dynamic public var metricalUnits: Swift.Bool
  public var allowedVerticals: RealmSwift.List<Swift.String>
  @objc override public static func primaryKey() -> Swift.String
  public var model: VeracitySDK.DTOUser {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOUser
  @objc deinit
}
extension User {
  public func getUserId() -> Swift.String
}
@objc public class APIRequest : ObjectiveC.NSObject, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate {
  public typealias CompletionHandler<T> = (T?, VeracitySDK.DTOError?, VeracitySDK.APIResponseStatus) -> () where T : Swift.Decodable
  public typealias UploadProgress = (Foundation.Progress) -> ()
  public init(_ method: Swift.String, path: Swift.String = "", customUrl: Foundation.URL? = nil, configuration: VeracitySDK.APIConfiguration? = APIConfiguration.current)
  public func with(name: Swift.String) -> VeracitySDK.APIRequest
  public func with<S>(name: Swift.String, value: S) -> VeracitySDK.APIRequest where S : Swift.LosslessStringConvertible
  public func with<S>(header: Swift.String, value: S) -> VeracitySDK.APIRequest where S : Swift.LosslessStringConvertible
  public func with(body: Foundation.Data?) -> VeracitySDK.APIRequest
  public func with(body: Swift.Encodable) -> VeracitySDK.APIRequest
  public func with(body: [Swift.String : Any]) -> VeracitySDK.APIRequest
  public func with(body: Foundation.Data) -> VeracitySDK.APIRequest
  public func with(uploadProgress: @escaping VeracitySDK.APIRequest.UploadProgress) -> VeracitySDK.APIRequest
  public func execute<T>(_ type: T.Type, completionHandler: @escaping VeracitySDK.APIRequest.CompletionHandler<T>) where T : Swift.Decodable
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VerificationProtectItem : VeracitySDK.ProtectItem {
  @objc override dynamic public init()
  @objc deinit
}
public enum APIResponseStatus : Swift.Int, Swift.CaseIterable {
  case `continue`
  case switchingProtocols
  case processing
  case earlyHints
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case imUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permanentRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case requestURITooLong
  case unsupportedMediaType
  case requestedRangeNotSatisfiable
  case expectationFailed
  case iMATeapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case tooEarly
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case connectionClosedWithoutAResponse
  case unavailableForLegalReasons
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case httpVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  case originUnknownError
  case originDown
  case originTimedOut
  case originUnreachable
  case originTimeout
  case sslHandshakeFailed
  case invalidSSLCertificate
  case networkConnectTimeoutError
  case unknown
  case error
  case offline
  case loading
  public static func status(forCode code: Swift.Int) -> VeracitySDK.APIResponseStatus
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VeracitySDK.APIResponseStatus]
  public typealias RawValue = Swift.Int
  public static var allCases: [VeracitySDK.APIResponseStatus] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public func debugLog(_ message: Any, filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
public func warningLog(_ message: Any, filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
public func errorLog(_ message: Any?, filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
public struct DTOProtectItem : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ApplicationUsed : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransferRequest : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum VeracitySdkType : Swift.Equatable {
  case art
  case jerseyProtector
  case jerseyVerifier
  case luxuryGoods
  case apparel
  case memorabilia
  case demo
  case trezorVerifier
  case goat
  case custom(endpoint: Swift.String, webhookUrl: Swift.String?)
  public static func == (a: VeracitySDK.VeracitySdkType, b: VeracitySDK.VeracitySdkType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class VeracitySDK {
  public static let configuration: VeracitySDK.VeracitySDK
  public static let database: VeracitySDK.RealmHandler
  public var type: VeracitySDK.VeracitySdkType
  public var verificationShouldMatchProtectingAlgo: Swift.Bool
  public var customFingerprintUploadOperationProvider: VeracitySDK.CustomImageUploadOperationProvider?
  @objc deinit
}
public enum CreatorRole : Swift.String {
  case expert
  case artist
  case trader
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension DTOCreator : VeracitySDK.Entity {
  public var storable: VeracitySDK.Creator {
    get
  }
  public func toStorable() -> VeracitySDK.Creator
  public typealias StoreType = VeracitySDK.Creator
}
@objc @_inheritsConvenienceInitializers public class Creator : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var identifier: Swift.String
  @objc dynamic public var firstName: Swift.String?
  @objc dynamic public var lastName: Swift.String?
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  convenience public init(firstName: Swift.String, lastName: Swift.String)
  convenience public init?(map: [Swift.String : Any])
  public var model: VeracitySDK.DTOCreator {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOCreator
  @objc deinit
}
extension Double {
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserManager : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.UserManager
  public var user: VeracitySDK.DTOUser? {
    get
    set
  }
  public var loggedUser: Swift.Bool {
    get
  }
  public var monitoringAgreement: Swift.Bool? {
    get
  }
  public var userNeedsToBeReauthenticateCallback: (() -> ())?
  public var userID: Swift.String?
  public func updateARGuiding(isOn: Swift.Bool)
  public func updateShareAnalytic(isOn: Swift.Bool)
  public func updateMetricUnits(isOn: Swift.Bool)
  public func changeMonitoringAgreement(to agrees: Swift.Bool, completion: @escaping (Swift.Bool?, Swift.Error?) -> ())
  public func saveProtectInstructionCompleted(for step: Swift.Int)
  public func isProtectInstructionCompleted(for step: Swift.Int) -> Swift.Bool
  public func logout()
  @objc deinit
}
public typealias DeviceChangeOrientationBlock = (UIKit.UIDeviceOrientation) -> ()
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeviceManager : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.DeviceManager
  public func removeDevice()
  @objc deinit
}
extension DeviceManager {
  public func flashlightAvailable() -> Swift.Bool
  public func toggleFlashlight(turnOn: Swift.Bool? = nil, for device: AVFoundation.AVCaptureDevice, _ brightness: Swift.Float) -> Swift.Bool
}
extension DeviceManager {
  public func startObservingLandscapeOrientationChanges(_ changesCallback: @escaping VeracitySDK.DeviceChangeOrientationBlock)
  public func endObservingLandscapeOrientationChanges()
}
@_hasMissingDesignatedInitializers public class DateManager {
  public static let utcFormatter: Foundation.DateFormatter
  public static let shortFullDateFormatter: Foundation.DateFormatter
  @objc deinit
}
public struct Size {
  public static let artworkDefaultTableViewCellHeight: CoreGraphics.CGFloat
  public static let artistDefaultTableViewCellHeight: CoreGraphics.CGFloat
  public static let chooseSpotDefaultCollectionViewCellHeight: CoreGraphics.CGFloat
  public static let chooseVerticalCollectionViewCellHeight: CoreGraphics.CGFloat
  public static let emptyProtectListTableViewCellHeight: CoreGraphics.CGFloat
  public static let emptyVerifyListTableViewCellHeight: CoreGraphics.CGFloat
  public static let statusLabelDefaultTableViewHeaderHeight: CoreGraphics.CGFloat
  public static let addArtistDefaultTableViewFooterHeight: CoreGraphics.CGFloat
  public static let activityIndicatorSize: CoreGraphics.CGFloat
  public static let filterOptionDefaultTableViewCellHeight: CoreGraphics.CGFloat
  public static let buttonMinSize: CoreGraphics.CGFloat
}
public struct LottieAnimations {
  public static let activityIndicatorDefault: Swift.String
  public static let activityIndicatorBlack: Swift.String
  public static let activityIndicatorPassportDetailState: Swift.String
  public static let activityIndicatorArtworkCellState: Swift.String
}
public struct AnimationDurations {
  public static let OPHUD: Swift.Double
  public static let keyboard: Swift.Double
}
public struct S3Constants {
  public static let baseURL: Swift.String
  public static let keyID: Swift.String
  public static let secretAccessKeyID: Swift.String
  public static let bucket: Swift.String
  public static let maxRetryCount: Swift.UInt32
}
public struct Constants {
  public static let numberOfProposals: Swift.Int
  public static let localIDPrefix: Swift.String
  public static let compressThumbnailQuality: CoreGraphics.CGFloat
  public static let compressOverviewQuality: CoreGraphics.CGFloat
  public static let compressOverlayQuality: CoreGraphics.CGFloat
  public static let thumbnailImageSize: CoreGraphics.CGSize
  public static let publicIDlength: Swift.Int
  public static let blurDetectScoreLimit: Swift.Double
  public static let veracityEmail: Swift.String
  public static let infoEmail: Swift.String
  public static func imageFilenameSuffixWith(blurScore: Swift.Double?) -> Swift.String?
}
extension Constants {
  public struct OPNotifications {
  }
}
public struct CreditPrice {
  public static let protection: Swift.Int
  public static let verification: Swift.Int
}
public struct UserDefaultsKeys {
  public static let credits: Swift.String
  public static let invoiceBilling: Swift.String
  public static let selectedVertical: Swift.String
  public static let verticalsSynced: Swift.String
  public static let selectedAlgoType: Swift.String
  public static let bluerDetectionState: Swift.String
  public static let lastUsedItemNameCounter: Swift.String
  public static let labelsOriginID: Swift.String
  public static let labelsOriginPublicID: Swift.String
  public static let waistbandsOriginID: Swift.String
  public static let waistbandsOriginPublicID: Swift.String
}
public struct NotificationsNames {
  public static let verticalWasChanged: Foundation.Notification.Name
  public static let creditsWasUpdated: Foundation.Notification.Name
  public static let downloadedRemoteItems: Foundation.Notification.Name
  public static let uploadItemProcess: Foundation.Notification.Name
}
public struct StringConstants {
  public static let doesntMatchError_0: Swift.String
  public static let doesntMatchError_1: Swift.String
  public static let doesntMatchError_2: Swift.String
}
public struct ApparelOriginID {
  public let publicID: Swift.String
  public let identifier: Swift.String
  public static var label: VeracitySDK.ApparelOriginID
  public static let waistband: VeracitySDK.ApparelOriginID
  public static func setDefaults()
}
extension DTOPublicProtectItem : VeracitySDK.Entity {
  public var storable: VeracitySDK.PublicProtectItem {
    get
  }
  public func toStorable() -> VeracitySDK.PublicProtectItem
  public typealias StoreType = VeracitySDK.PublicProtectItem
}
@objc @_inheritsConvenienceInitializers public class PublicProtectItem : VeracitySDK.ProtectItem {
  @objc override dynamic public init()
  @objc deinit
}
public struct DTOMetaData : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class JSONAPIDecoder : VeracitySDK.APIDecoder {
  public func decode<T>(from data: Foundation.Data, as type: T.Type) -> T? where T : Swift.Decodable
  @objc deinit
}
public protocol CameraStreamDelegate : AnyObject {
  func didTakeImage(_ image: UIKit.UIImage)
  func didFailedToTakeImage(_ error: Swift.Error)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CameraStreamPreview : UIKit.UIView {
  public var captureDevice: AVFoundation.AVCaptureDevice? {
    get
  }
  weak public var delegate: VeracitySDK.CameraStreamDelegate?
  @objc deinit
  @objc override dynamic public func layoutSubviews()
  public func takePhoto()
  public func activateSession()
  public func isSessionRunning() -> Swift.Bool
  public func deactivateSession()
}
extension CameraStreamPreview : AVFoundation.AVCapturePhotoCaptureDelegate {
  @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
}
extension CameraStreamPreview {
  public func setupOverlay(_ maskSize: CoreGraphics.CGSize = CGSize(width: 300, height: 400), lineColor: UIKit.UIColor = .green, lineWidth: CoreGraphics.CGFloat = 10, lineCap: QuartzCore.CAShapeLayerLineCap = .round)
  public func removeShapeOverlay()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class JobResultChecker : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.JobResultChecker
  public func setupObserving()
  @objc deinit
}
public enum ExpectedJobResult : Swift.String {
  case verified
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class LocalJob : RealmSwift.Object {
  @objc dynamic public var identifier: Swift.String
  @objc dynamic public var jobID: Swift.String?
  @objc dynamic public var overviewImageFilename: Swift.String?
  @objc dynamic public var thumbnailImageFilename: Swift.String?
  @objc dynamic public var overviewImageUrl: Swift.String?
  @objc dynamic public var thumbnailImageUrl: Swift.String?
  @objc dynamic public var publicArtwork: VeracitySDK.PublicProtectItem?
  @objc dynamic public var verificationArtwork: VeracitySDK.VerificationProtectItem?
  @objc dynamic public var artwork: VeracitySDK.ProtectItem?
  public var fingerprintImageFilenames: RealmSwift.List<Swift.String>
  @objc dynamic public var fingerprintImageFilenamesCount: Swift.Int
  @objc dynamic public var algo: Swift.String?
  @objc dynamic public var expectedResult: Swift.String? {
    get
  }
  public var fingerprintImageUrls: RealmSwift.List<Swift.String>
  @objc dynamic public var fingerprint: VeracitySDK.Fingerprint?
  @objc dynamic public var batchJobID: Swift.String?
  public var filesUploadTracking: RealmSwift.List<VeracitySDK.FileUploadTrack>
  public var type: VeracitySDK.JobType? {
    get
    set
  }
  public var state: VeracitySDK.ItemState? {
    get
  }
  public var canBeUploaded: Swift.Bool {
    get
  }
  public var anyArtwork: VeracitySDK.ProtectItem? {
    get
  }
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  convenience public init(type: VeracitySDK.JobType, artwork: VeracitySDK.ProtectItem?)
  public func appendFingerprintFilename(_ filename: Swift.String)
  public func clearFingerprints()
  public func removeAllLocalImages()
  public func updateVerificationAlgoToMatchProtectedAlgo()
  public func setExpectedResult(_ expectation: VeracitySDK.ExpectedJobResult)
  public func getTimeUploadFiles() -> Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
extension LocalJob : VeracitySDK.VeracityItem {
  public var id: Swift.String {
    get
  }
  public var itemName: Swift.String? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var thumbImageUrl: Swift.String? {
    get
  }
  public var overlayImageUrl: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppManager {
  public static var shorAppName: Swift.String? {
    get
  }
  public static var itemName: Swift.String {
    get
  }
  public static var itemsName: Swift.String {
    get
  }
  public static var buildNumberRemoteConfigKey: Swift.String? {
    get
  }
  public static func showAppSettings()
  @objc deinit
}
extension AppManager {
  public static var usesOverlayFingerprintTake: Swift.Bool {
    get
  }
  public static var usesSpotSelectionFingerprintTake: Swift.Bool {
    get
  }
  public static var usesAlgoSwitching: Swift.Bool {
    get
  }
  public static var usesBlurDetectorMode: Swift.Bool {
    get
  }
  public static var usesARSmallFingerprintTake: Swift.Bool {
    get
  }
  public static var longFlowProtection: Swift.Bool {
    get
  }
}
extension AppManager {
  public static var allVerticals: [VeracitySDK.ApplicationVertical] {
    get
  }
  public static var allowedVerticalsWasSynced: Swift.Bool {
    get
  }
  public static var allowedVerticals: [VeracitySDK.ApplicationVertical]? {
    get
  }
  public static func updateAllowedVerticals(completion: ((Swift.Bool) -> ())?)
  public static func change(vertical: VeracitySDK.ApplicationVertical)
  public static var selectedVertical: VeracitySDK.ApplicationVertical {
    get
  }
  public static func change(selectedAlgo algo: VeracitySDK.AlgoType)
  public static var selectedAlgo: VeracitySDK.AlgoType? {
    get
  }
  public static func resetVerticals()
  public static var dimensionWidth: Swift.Double?
  public static var dimensionHeight: Swift.Double?
}
extension UIView {
  public func addShadow(withOffset offset: CoreGraphics.CGSize? = nil)
  public func addOutsideBorder(width borderWidth: CoreGraphics.CGFloat, color borderColor: UIKit.UIColor)
  public func removeExternalBorders()
  public var parentViewController: UIKit.UIViewController? {
    get
  }
}
extension UIButton {
  public func setTitleUnderline(_ text: Swift.String, for state: UIKit.UIControl.State)
}
extension UIButton {
  @objc @IBInspectable dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
@objc @_inheritsConvenienceInitializers public class Wallet : RealmSwift.Object {
  @objc override public static func primaryKey() -> Swift.String
  convenience public init(user: VeracitySDK.User, address: Swift.String, active: Swift.Bool, kty: Swift.String, n: Swift.String, e: Swift.String, d: Swift.String, p: Swift.String, q: Swift.String, dp: Swift.String, dq: Swift.String, qi: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Wallet {
  public func updateActive(_ active: Swift.Bool)
  public func isActive() -> Swift.Bool
  public func getAddress() -> Swift.String
  public func getKty() -> Swift.String
  public func getN() -> Swift.String
  public func getE() -> Swift.String
  public func getD() -> Swift.String
  public func getP() -> Swift.String
  public func getQ() -> Swift.String
  public func getDP() -> Swift.String
  public func getDQ() -> Swift.String
  public func getQI() -> Swift.String
}
public struct DTOTradingCode : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ResultIndicatorType : Swift.String {
  case verify
  case protect
  case imageSearch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ResultIndicatorValue : RealmSwift.Object {
  @objc dynamic public var lastSeen: Foundation.Date
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  convenience public init(identifier: Swift.String, type: VeracitySDK.ResultIndicatorType)
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol Entity {
  associatedtype StoreType : VeracitySDK.Storable
  func toStorable() -> Self.StoreType
}
public protocol Storable {
  associatedtype EntityObject : VeracitySDK.Entity
  var model: Self.EntityObject { get }
}
@objc @_inheritsConvenienceInitializers public class NetworkClient : ObjectiveC.NSObject {
  public static func login(email: Swift.String, password: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func register(email: Swift.String, password: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func resendActivationLink(forEmail email: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func activateAccount(forEmail email: Swift.String, token: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func updateAllowedVerticals(completion: (([Swift.String]?, Swift.Error?) -> ())?)
  public static func resetPassword(forEmail email: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func checkResetPassportToken(_ token: Swift.String, completion: @escaping (Swift.String?, Swift.Error?) -> ())
  public static func setNewPassword(_ password: Swift.String, resetToken token: Swift.String, completion: @escaping (Swift.String?, Swift.Error?) -> ())
  public static func credits(completion: @escaping (VeracitySDK.DTOCredits?, Swift.Error?) -> ())
  public static func creditsCharge(amount: Swift.UInt, signatue: Swift.String, invoice: Swift.String, completion: @escaping (VeracitySDK.DTOCredits?, Swift.Error?) -> ())
  public static func myProtectedItems(clearCache: Swift.Bool = false, cacheResults: Swift.Bool = true, completion: (([VeracitySDK.DTOProtectItem], Swift.Error?) -> ())?)
  public static func publicProtectedItemBy(publicID: Swift.String, completion: @escaping (VeracitySDK.PublicProtectItem?, Swift.Error?) -> ())
  public static func searchResultsBy(itemIDs: [Swift.String], completion: @escaping ([VeracitySDK.PublicProtectItem]?) -> ())
  public static func searchResultsBy(metadataJson json: Swift.String, completion: @escaping ([VeracitySDK.PublicProtectItem]?, Swift.Error?) -> ())
  public static func removeProtectedItem(byID identifier: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func protectItemFingerprint(itemID: Swift.String, completion: @escaping (VeracitySDK.Fingerprint?, Swift.Error?) -> ())
  public static func getFingerprintInfoBy(artworkID: Swift.String, completion: @escaping (VeracitySDK.FingerprintLocation?, Swift.String?, Swift.Error?) -> ())
  public static func emailPassport(itemID identifier: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func transferItem(byID identifier: Swift.String, toEmail email: Swift.String, completion: @escaping (Swift.String?, Swift.String?, Swift.Error?) -> ())
  public static func getTransferDetail(byID identifier: Swift.String, completion: @escaping (VeracitySDK.ProtectItem?, Swift.Error?) -> ())
  public static func acceptTransfer(ID identifier: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func declineTransfer(ID identifier: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func jobs(clearCache: Swift.Bool = false, cacheResults: Swift.Bool = true, completion: (([VeracitySDK.Job], Swift.Error?) -> ())?)
  public static func job(byID identifier: Swift.String, completion: @escaping (VeracitySDK.Job?, Swift.Error?) -> ())
  public static func removeAllData(completion: @escaping (Swift.Bool) -> ())
  public static func creators(completion: (([VeracitySDK.Creator], Swift.Error?) -> ())?)
  public static func createArtist(_ firstName: Swift.String, lastName: Swift.String, completion: @escaping (VeracitySDK.Creator?, Swift.Error?) -> ())
  public static func changeMonitoringAgreement(to agreement: Swift.Bool, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  public static func verify(dmid identifier: Swift.String, completion: @escaping (Swift.String?, Swift.String?, Swift.Error?) -> ())
  public static func verifyBlockchainCheck(forDMID dmid: Swift.String, vpID: Swift.String, hash: Swift.String, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
public enum Text : Swift.String {
  case DAML
  case POCPakistan
  case about
  case acceptItemTransfer
  case accountAcivatedSuccess
  case accountWaitingActive
  case activeTokenExpired
  case agree
  case agreeRegisterAccount
  case all
  case analyzing
  case apparel
  case arGuiding
  case art
  case arweave
  case authenticator
  case author
  case analyzingMessage
  case arCameraCapturingMessage
  case arCameraTooCloseMesssage
  case arCameraFitEntireMessage
  case arCameraMoveCloseMessage
  case arCameraTrackingLoseMessage
  case arCameraHoldSteadyMessage
  case arCameraBadQualityMessage
  case arGuidingMessage
  case areYouSure
  case backToMyItems
  case balance
  case buyMoreCredits
  case backToList
  case begin
  case blurErrorTitle
  case blurErrorMessage
  case beforeStart
  case changeVertical
  case chooseItemType
  case chooseVertical
  case close
  case cm
  case confirm
  case confirmAccount
  case confirmAndContinue
  case coreTestScreen
  case createAccount
  case creditDescription
  case credits
  case cropBackground
  case cancel
  case cantBeTold
  case cantBeToldDesc
  case createItemHelpStep1Title
  case createItemHelpStep2Title
  case createItemHelpStep3Title
  case createItemHelpStep4Title
  case createItemHelpStep1Desc
  case createItemHelpStep2Desc
  case createItemHelpStep3Desc
  case createItemHelpStep4Desc
  case createItemHelpLPMStep2Title
  case createItemHelpLPMStep3Title
  case createItemHelpLPMStep2Desc
  case createItemHelpLPMStep3Desc
  case createItemInstructOverPhoto
  case createItemLPMInstructOverPhoto
  case createItemInstructCropPhoto
  case createItemInstructTakeFingerAR
  case createItemInstructTakeFingerNormal
  case createItemInstructTakeFingerSicpa
  case crop
  case cropConfirmMessage
  case cropConfirmLPMMessage
  case cropConfirmLPMCoinMessage
  case cropRedo
  case confirmNormalFingerprintMessage
  case confirmLPMFingerprintMessage
  case `continue`
  case cropLabel
  case cropCoin
  case cropLabelToastMessage
  case cropCoinToastMessage
  case clearSearchHistory
  case deMarchiProtector
  case defaultMeasurementUnits
  case demo
  case dimensionError
  case dimensionErrorRatio
  case dimensionWH
  case dimensions
  case dimensionsAreNotValidNumber
  case doesntMatch
  case deleteItem
  case deleteItemConfirmTitle
  case deleteItemconfirmDesc
  case deleteSuccessMessage
  case deleteItemErrorWhenIncomplete
  case deleteItemErrorNotIsProtection
  case email
  case emailExist
  case errorCombileEmailPassword
  case errorFillEmailPassword
  case emailSentTo
  case failed
  case finishVerification
  case forgotPassword
  case fingerprintNormalTakeMoreMessage
  case gotIt
  case goBack
  case h
  case height
  case helmetOrFootball
  case help
  case hide
  case history
  case historyEmptyDesc
  case identityDocuments
  case imperial
  case inApp
  case inTransfer
  case inchs
  case `in`
  case incomplete
  case infoEmail
  case inputError
  case invalidEmailOrPassword
  case inviteTitleLabel
  case itemDetail
  case itemInfo
  case itemName
  case incorrectResult
  case label
  case labels
  case landingDesc
  case linkWasResent
  case login
  case loginFailed
  case logout
  case lowBalanceError
  case lpmPoc
  case lpmPocHelpStep1
  case lpmPocHelpStep2
  case metric
  case myArweaveWallet
  case myItemEmptyDesc
  case myItems
  case markedAsIncorrect
  case nameAndSurname
  case networkError
  case newAccount
  case newPassword
  case newPasswordLeast6Chars
  case news
  case notNow
  case notProtected
  case notificationSetup
  case off
  case on
  case openEmailApp
  case or
  case orChoose
  case offlineMessage
  case packaging
  case password
  case passwordLeast6Chars
  case passwordReset
  case passwordResetFailed
  case passwordResetWasSentTo
  case pastVerifications
  case pending
  case plan
  case plaseTryAgain
  case player
  case pleaseConnectToInternet
  case pleaseEnterPasswordFor
  case pleaseEnterValidEmail
  case pleaseFillAllFields
  case pleaseFillEmail
  case pleaseFillNewPassword
  case pleaseProvideValidEmail
  case pleaseTryLater
  case protect
  case protectJersey
  case protectNew
  case protectNewItem
  case protected
  case protectedOn
  case protectedPhysicalCode
  case protectYourFirstItem
  case protectYourFirstItemDesc
  case protectYourFirstItemMessage
  case publicId
  case pendingMessage
  case readOurPolicy
  case resendLinkFailed
  case resendTheLink
  case resetPassword
  case resetPasswordDesc
  case resetPasswordFailedNoLongerValid
  case resetPasswordLinkErrorLoggerValid
  case resetPasswordSuccessDesc
  case resetPasswordSuccessMessage
  case retakePhoto
  case revert
  case recentSearches
  case resultFeedback
  case resultFeedbackDesc
  case resultFeedbackCheckBox
  case revertDesc
  case revertBack
  case sName
  case search
  case searchItemToVerify
  case sendFeedback
  case sendRestLink
  case sentConfirmationLinkTo
  case set
  case setAndSignIn
  case setDimension
  case setItemName
  case setDimensions
  case setNewPassword
  case setNewPasswordFor
  case settings
  case shareAnalytic
  case shareAnalyticData
  case shareAnalyticHeadline
  case shareAnalyticText1
  case shareAnalyticText2
  case shareAnalyticText3
  case show
  case signin
  case sportMemorabilia
  case sendItemToEmail
  case sendItemToEmailErrorMessage
  case step
  case step1
  case step2
  case sicpa
  case takeCloseUpPhoto
  case takeOverviewPhoto
  case termAndCondition
  case termAndConditions
  case tradingCard
  case takeLPMFingerOverlayStep1Message
  case takeFingerOverlayStep1Message
  case takeFingerOverlayStep2Message
  case takeFingerOverlayVerifyMessage
  case units
  case uploading
  case unableProtectItem
  case uploadingMessage
  case veracity
  case veracityEmail
  case verified
  case verifiedItem
  case verify
  case verifyItem
  case verifyNew
  case verifyNewItem
  case vertical
  case verificationDetail
  case verifiedSuccessTitle
  case verifiedSuccessMessage
  case verifiedFailedTitle
  case verifiedFailedMessage
  case verificationDetails
  case verifyDate
  case verifyLocation
  case verifyUser
  case verifyAgain
  case verifiedPendingMessage
  case verifiedUploadingMessage
  case verifiedAnalyzingMessage
  case verifiedUnableToVerifyMessage
  case verifiedUnableToVerifyTitle
  case w
  case waistband
  case whichAccountWantToResetPassword
  case width
  case year
  case yearCreationError1
  case yearCreationError2
  case yearIsNotValidNumber
  case yearOfCreation
  public var text: Swift.String {
    get
  }
  public var localizedText: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class TestSampleViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TestSampleViewController : VeracitySDK.EventListenerDelegate {
  @objc dynamic public func onProtectUploadingFinished(protectItem: VeracitySDK.LocalProtectItem)
  @objc dynamic public func onProtectUploadingStarted(protectItem: VeracitySDK.LocalProtectItem)
  @objc dynamic public func onProtectAnalyzingFinished(protectItems: [VeracitySDK.ProtectItem])
  @objc dynamic public func onProtectUploadingProgress(progress: Swift.Int, protectItem: VeracitySDK.LocalProtectItem)
  @objc dynamic public func onVerifyUploadingStarted(jobItem: VeracitySDK.LocalJob)
  @objc dynamic public func onVerifyUploadingFinished(jobItem: VeracitySDK.LocalJob)
  @objc dynamic public func onVerifyAnalyzingFinished(jobItems: [VeracitySDK.Job])
  @objc dynamic public func onVerifyUploadingProgress(progress: Swift.Int, jobItem: VeracitySDK.LocalJob)
}
@objc public class ImageDownloadOperation : VeracitySDK.VPOperation {
  public var downloadedImage: UIKit.UIImage?
  public var responseError: Swift.Error?
  public init(imageUrl: Foundation.URL)
  @objc override dynamic public func main()
  @objc override dynamic public init()
  @objc deinit
}
public struct DTOLogin : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DTOUser : Swift.Codable {
  public var id: Swift.String?, email: Swift.String?, role: Swift.String?
  public var invoiceBilling: Swift.Bool?
  public var allowedVerticals: [Swift.String]
  public var monitoringAgreement: Swift.Bool?
  public var token: Swift.String?
  public var arGuidingON: Swift.Bool?
  public var shareAnalyticON: Swift.Bool?
  public var loginDate: Foundation.Date?
  public var flashlightOn: Swift.Bool?
  public var metricalUnits: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol OptionalProtocol {
  associatedtype Wrapped
  var optionalValue: Self.Wrapped? { get }
}
extension Optional : VeracitySDK.OptionalProtocol {
  public var optionalValue: Wrapped? {
    get
  }
  public func orNil(default: @autoclosure () -> Wrapped) -> Wrapped
}
extension Dictionary {
  public func convertToJSONString() -> Swift.String?
  public func toData() -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class JSONAPIEncoder : VeracitySDK.APIEncoder {
  public func encode(from object: Swift.Encodable) -> Foundation.Data?
  public func encode(from dictionary: [Swift.String : Any]) -> Foundation.Data?
  @objc deinit
}
public struct AppSize {
  public static let zero: CoreGraphics.CGFloat
  public static let s1: CoreGraphics.CGFloat
  public static let s2: CoreGraphics.CGFloat
  public static let s4: CoreGraphics.CGFloat
  public static let s8: CoreGraphics.CGFloat
  public static let s10: CoreGraphics.CGFloat
  public static let s12: CoreGraphics.CGFloat
  public static let s14: CoreGraphics.CGFloat
  public static let s16: CoreGraphics.CGFloat
  public static let s18: CoreGraphics.CGFloat
  public static let s20: CoreGraphics.CGFloat
  public static let s24: CoreGraphics.CGFloat
  public static let s26: CoreGraphics.CGFloat
  public static let s32: CoreGraphics.CGFloat
  public static let s34: CoreGraphics.CGFloat
  public static let s40: CoreGraphics.CGFloat
  public static let s48: CoreGraphics.CGFloat
  public static let s56: CoreGraphics.CGFloat
  public static let s96: CoreGraphics.CGFloat
  public static let s144: CoreGraphics.CGFloat
}
public struct AppColor {
  public static let primary: UIKit.UIColor
  public static let lightPrimary: UIKit.UIColor
  public static let lightGray: UIKit.UIColor
  public static let light: UIKit.UIColor
  public static let darkGray: UIKit.UIColor
  public static let gray: UIKit.UIColor
  public static let white: UIKit.UIColor
  public static let black: UIKit.UIColor
  public static let red: UIKit.UIColor
  public static let red1: UIKit.UIColor
  public static let lightRed: UIKit.UIColor
  public static let lightBlue: UIKit.UIColor
  public static let lightBlue1: UIKit.UIColor
  public static let darkGreen: UIKit.UIColor
  public static let lightGreen1: UIKit.UIColor
  public static let green: UIKit.UIColor
  public static let lightGreen: UIKit.UIColor
  public static let lineColor: UIKit.UIColor
  public static let backgroundColor: UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers public class JobsReloadOperation : VeracitySDK.VPOperation {
  @objc override dynamic public func main()
  @objc override dynamic public init()
  @objc deinit
}
extension DTOFingerprint : VeracitySDK.Entity {
  public var storable: VeracitySDK.Fingerprint {
    get
  }
  public func toStorable() -> VeracitySDK.Fingerprint
  public typealias StoreType = VeracitySDK.Fingerprint
}
@objc @_inheritsConvenienceInitializers public class Fingerprint : RealmSwift.Object, VeracitySDK.Storable {
  @objc dynamic public var identifier: Swift.String!
  @objc dynamic public var name: Swift.String!
  @objc dynamic public var image1Url: Swift.String!
  @objc dynamic public var image2Url: Swift.String!
  @objc dynamic public var fingerprintHash: Swift.String?
  @objc dynamic public var location: VeracitySDK.FingerprintLocation?
  @objc override public static func primaryKey() -> Swift.String
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  required convenience public init?(map: [Swift.String : Any])
  public var model: VeracitySDK.DTOFingerprint {
    get
  }
  @objc override dynamic public init()
  public typealias EntityObject = VeracitySDK.DTOFingerprint
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RealmHandler : ObjectiveC.NSObject {
  public static let shared: VeracitySDK.RealmHandler
  public var defaultConfig: RealmSwift.Realm.Configuration!
  public var isInWriteTransaction: Swift.Bool {
    get
  }
  public func getRealm() -> RealmSwift.Realm
  public func createNewInstance() throws -> RealmSwift.Realm?
  public func refreshData()
  public func add(_ object: RealmSwift.Object, modifiedUpdate: Swift.Bool)
  public func add(_ objects: [RealmSwift.Object], modifiedUpdate: Swift.Bool)
  public func persist(updates: () -> ())
  public func remove(_ object: RealmSwift.Object)
  public func remove(_ results: RealmSwift.Results<VeracitySDK.LocalProtectItem>)
  public func remove(_ results: RealmSwift.Results<VeracitySDK.SearchHistory>)
  public func remove(_ results: RealmSwift.Results<VeracitySDK.LocalJob>)
  public func removeWholeDB()
  public func getObjects<T>(of type: T.Type) -> RealmSwift.Results<T> where T : RealmSwift.Object
  public func getObject<T>(of type: T.Type, forKey key: Swift.String) -> T? where T : RealmSwift.Object
  public func migrateUserData(_ user: VeracitySDK.User)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LocalProtectItem : RealmSwift.Object {
  @objc dynamic public var identifier: Swift.String
  @objc dynamic public var artwork: VeracitySDK.ProtectItem?
  final public let height: RealmSwift.RealmOptional<Swift.Double>
  final public let width: RealmSwift.RealmOptional<Swift.Double>
  @objc dynamic public var artist: VeracitySDK.Creator?
  @objc dynamic public var name: Swift.String?
  final public let year: RealmSwift.RealmOptional<Swift.Int>
  @objc dynamic public var overviewImageFilename: Swift.String?
  @objc dynamic public var thumbnailImageFilename: Swift.String?
  @objc dynamic public var createdAt: Foundation.Date
  public var fingerprintImageFilenames: RealmSwift.List<Swift.String>
  @objc dynamic public var fingerprintImageFilenamesCount: Swift.Int
  @objc dynamic public var fingerprintLocation: VeracitySDK.FingerprintLocation?
  public var filesUploadTracking: RealmSwift.List<VeracitySDK.FileUploadTrack>
  @objc dynamic public var metadataString: Swift.String?
  @objc dynamic public var overlayGuideImageFilename: Swift.String?
  @objc dynamic public var algo: Swift.String?
  @objc dynamic public var thumbnailImageUrl: Swift.String?
  @objc dynamic public var overviewImageUrl: Swift.String?
  public var fingerprintImageUrls: RealmSwift.List<Swift.String>
  @objc dynamic public var createdArtworkID: Swift.String?
  @objc dynamic public var jobID: Swift.String?
  public var state: VeracitySDK.ItemState? {
    get
  }
  public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public var canBeUploaded: Swift.Bool {
    get
  }
  public var tooSmallItem: Swift.Bool {
    get
  }
  @objc override dynamic public class func shouldIncludeInDefaultSchema() -> Swift.Bool
  @objc override public static func primaryKey() -> Swift.String
  convenience public init(artwork: VeracitySDK.ProtectItem?)
  public func appendFingerprintFilename(_ filename: Swift.String, realm: RealmSwift.Realm? = nil)
  public func updateMetadata(value: Swift.AnyHashable, forKey key: Swift.String)
  public func clearFingerprints()
  public func clearOverview()
  public func removeAllLocalImages()
  @objc override dynamic public init()
  @objc deinit
}
extension LocalProtectItem : VeracitySDK.VeracityItem {
  public var id: Swift.String {
    get
  }
  public var itemName: Swift.String? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var thumbImageUrl: Swift.String? {
    get
  }
  public var overlayImageUrl: Swift.String? {
    get
  }
}
extension VeracitySDK.FontStyle : Swift.Equatable {}
extension VeracitySDK.FontStyle : Swift.Hashable {}
extension VeracitySDK.FontStyle : Swift.RawRepresentable {}
extension VeracitySDK.UnitType : Swift.Equatable {}
extension VeracitySDK.UnitType : Swift.Hashable {}
extension VeracitySDK.UnitType : Swift.RawRepresentable {}
extension VeracitySDK.JobType : Swift.Equatable {}
extension VeracitySDK.JobType : Swift.Hashable {}
extension VeracitySDK.JobType : Swift.RawRepresentable {}
extension VeracitySDK.AlgoType : Swift.Equatable {}
extension VeracitySDK.AlgoType : Swift.Hashable {}
extension VeracitySDK.AlgoType : Swift.RawRepresentable {}
extension VeracitySDK.ApplicationVertical : Swift.Equatable {}
extension VeracitySDK.ApplicationVertical : Swift.Hashable {}
extension VeracitySDK.ApplicationVertical : Swift.RawRepresentable {}
extension VeracitySDK.ItemState : Swift.Equatable {}
extension VeracitySDK.ItemState : Swift.Hashable {}
extension VeracitySDK.ItemState : Swift.RawRepresentable {}
extension VeracitySDK.DetailCaptureType : Swift.Equatable {}
extension VeracitySDK.DetailCaptureType : Swift.Hashable {}
extension VeracitySDK.APIResponseStatus : Swift.Equatable {}
extension VeracitySDK.APIResponseStatus : Swift.Hashable {}
extension VeracitySDK.APIResponseStatus : Swift.RawRepresentable {}
extension VeracitySDK.CreatorRole : Swift.Equatable {}
extension VeracitySDK.CreatorRole : Swift.Hashable {}
extension VeracitySDK.CreatorRole : Swift.RawRepresentable {}
extension VeracitySDK.ExpectedJobResult : Swift.Equatable {}
extension VeracitySDK.ExpectedJobResult : Swift.Hashable {}
extension VeracitySDK.ExpectedJobResult : Swift.RawRepresentable {}
extension VeracitySDK.ResultIndicatorType : Swift.Equatable {}
extension VeracitySDK.ResultIndicatorType : Swift.Hashable {}
extension VeracitySDK.ResultIndicatorType : Swift.RawRepresentable {}
extension VeracitySDK.Text : Swift.Equatable {}
extension VeracitySDK.Text : Swift.Hashable {}
extension VeracitySDK.Text : Swift.RawRepresentable {}
