// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MLPatchExtractor
import CoreML
@_exported import MLPatchExtractor
import Swift
import UIKit
import VideoToolbox
import _Concurrency
extension CoreGraphics.CGImage {
  public func pixelBuffer(width: Swift.Int, height: Swift.Int) -> CoreVideo.CVPixelBuffer?
}
extension UIKit.UIImage {
  public func pixelBuffer(width: Swift.Int, height: Swift.Int) -> CoreVideo.CVPixelBuffer?
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
}
public protocol MLPatchExtractorProtocol {
  static func create(image: CoreVideo.CVPixelBuffer) -> CoreML.MLFeatureProvider
}
public enum MLPatchSampling {
  case random
  case uniform
  public static func == (a: MLPatchExtractor.MLPatchSampling, b: MLPatchExtractor.MLPatchSampling) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MLPatchExtractor<Element> where Element : MLPatchExtractor.MLPatchExtractorProtocol {
  public static func extract(image: UIKit.UIImage, patchSize: CoreGraphics.CGSize, patchDistribution distribution: CoreGraphics.CGSize, maskRectangle: CoreGraphics.CGRect) -> ([Element]?, [CoreGraphics.CGRect]?)
  public static func extract(image: UIKit.UIImage, patchSize: CoreGraphics.CGSize, count: Swift.Int, sampling: MLPatchExtractor.MLPatchSampling = .random, maskRectangle: CoreGraphics.CGRect) -> ([Element]?, [CoreGraphics.CGRect]?)
  public static func extract(image: UIKit.UIImage, patchSize: CoreGraphics.CGSize, count: Swift.Int, sampling: MLPatchExtractor.MLPatchSampling = .random, maskFactor: CoreGraphics.CGFloat = 1.0) -> ([Element]?, [CoreGraphics.CGRect]?, CoreGraphics.CGRect?)
  public static func extract(image: UIKit.UIImage, patchSize: CoreGraphics.CGSize, origins: [CoreGraphics.CGPoint]) -> ([Element]?, [CoreGraphics.CGRect]?)
  @objc deinit
}
extension CoreImage.CIImage {
  public func pixelBuffer(width: Swift.Int, height: Swift.Int, in context: CoreImage.CIContext) -> CoreVideo.CVPixelBuffer?
  public func pixelBuffer(width: Swift.Int, height: Swift.Int) -> CoreVideo.CVPixelBuffer?
}
extension MLPatchExtractor.MLPatchSampling : Swift.Equatable {}
extension MLPatchExtractor.MLPatchSampling : Swift.Hashable {}
